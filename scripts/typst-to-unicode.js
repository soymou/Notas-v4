import { readdir, readFile, writeFile } from 'fs/promises';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));

// Mapping of common Typst math symbols to Unicode
const typstToUnicode = {
  // Greek letters
  'alpha': 'Œ±', 'beta': 'Œ≤', 'gamma': 'Œ≥', 'delta': 'Œ¥', 'epsilon': 'Œµ',
  'zeta': 'Œ∂', 'eta': 'Œ∑', 'theta': 'Œ∏', 'iota': 'Œπ', 'kappa': 'Œ∫',
  'lambda': 'Œª', 'mu': 'Œº', 'nu': 'ŒΩ', 'xi': 'Œæ', 'pi': 'œÄ',
  'rho': 'œÅ', 'sigma': 'œÉ', 'tau': 'œÑ', 'upsilon': 'œÖ', 'phi': 'œÜ',
  'chi': 'œá', 'psi': 'œà', 'omega': 'œâ',

  // Capital Greek
  'Alpha': 'Œë', 'Beta': 'Œí', 'Gamma': 'Œì', 'Delta': 'Œî', 'Epsilon': 'Œï',
  'Zeta': 'Œñ', 'Eta': 'Œó', 'Theta': 'Œò', 'Iota': 'Œô', 'Kappa': 'Œö',
  'Lambda': 'Œõ', 'Mu': 'Œú', 'Nu': 'Œù', 'Xi': 'Œû', 'Pi': 'Œ†',
  'Rho': 'Œ°', 'Sigma': 'Œ£', 'Tau': 'Œ§', 'Upsilon': 'Œ•', 'Phi': 'Œ¶',
  'Chi': 'Œß', 'Psi': 'Œ®', 'Omega': 'Œ©',

  // Common math sets
  'NN': '‚Ñï', 'ZZ': '‚Ñ§', 'QQ': '‚Ñö', 'RR': '‚Ñù', 'CC': '‚ÑÇ',

  // Operators and symbols
  'times': '√ó', 'div': '√∑', 'pm': '¬±', 'mp': '‚àì',
  'sum': '‚àë', 'prod': '‚àè', 'integral': '‚à´',
  'partial': '‚àÇ', 'infinity': '‚àû', 'infty': '‚àû',
  'forall': '‚àÄ', 'exists': '‚àÉ', 'nexists': '‚àÑ',
  'emptyset': '‚àÖ', 'in': '‚àà', 'notin': '‚àâ',
  'subset': '‚äÇ', 'supset': '‚äÉ', 'subseteq': '‚äÜ', 'supseteq': '‚äá',
  'cup': '‚à™', 'cap': '‚à©', 'setminus': '‚àñ',
  'wedge': '‚àß', 'vee': '‚à®', 'neg': '¬¨',
  'implies': '‚áí', 'iff': '‚áî', 'therefore': '‚à¥', 'because': '‚àµ',
  'approx': '‚âà', 'equiv': '‚â°', 'neq': '‚â†', 'leq': '‚â§', 'geq': '‚â•',
  'll': '‚â™', 'gg': '‚â´', 'prec': '‚â∫', 'succ': '‚âª',
  'sim': '‚àº', 'simeq': '‚âÉ', 'cong': '‚âÖ', 'propto': '‚àù',
  'perp': '‚ä•', 'parallel': '‚à•',
  'angle': '‚à†', 'triangle': '‚ñ≥', 'square': '‚ñ°', 'diamond': '‚ãÑ',
  'star': '‚ãÜ', 'circ': '‚àò', 'bullet': '‚Ä¢',
  'nabla': '‚àá', 'sqrt': '‚àö', 'cbrt': '‚àõ',
  'degree': '¬∞', 'prime': '‚Ä≤', 'dprime': '‚Ä≥',
  'aleph': '‚Ñµ', 'beth': '‚Ñ∂', 'gimel': '‚Ñ∑',

  // Arrows
  'arrow.r': '‚Üí', 'arrow.l': '‚Üê', 'arrow.t': '‚Üë', 'arrow.b': '‚Üì',
  'arrow.l.r': '‚Üî', 'arrow.t.b': '‚Üï',
  'Arrow.r': '‚áí', 'Arrow.l': '‚áê', 'Arrow.t': '‚áë', 'Arrow.b': '‚áì',
  'Arrow.l.r': '‚áî', 'Arrow.t.b': '‚áï',
  'arrow': '‚Üí', 'larr': '‚Üê', 'uarr': '‚Üë', 'darr': '‚Üì',
  'harr': '‚Üî', 'lArr': '‚áê', 'rArr': '‚áí', 'hArr': '‚áî',

  // Modifiers
  'tilde': '~', 'hat': '^', 'bar': '‚Äæ', 'dot': '¬∑', 'ddot': '¬®',
};

// Find all MDX files
async function findMdxFiles(dir) {
  const files = [];
  const entries = await readdir(dir, { withFileTypes: true });

  for (const entry of entries) {
    const fullPath = join(dir, entry.name);
    if (entry.isDirectory()) {
      files.push(...await findMdxFiles(fullPath));
    } else if (entry.name.endsWith('.mdx')) {
      files.push(fullPath);
    }
  }

  return files;
}

// Convert Typst math in headings to Unicode
function convertTypstInHeadings(content) {
  let modified = false;

  // Match headings (## text or ### text, etc.)
  const converted = content.replace(/^(#{1,6})\s+(.+)$/gm, (match, hashes, heading) => {
    // Check if heading contains Typst math $...$
    if (!heading.includes('$')) {
      return match;
    }

    let newHeading = heading;

    // Replace $...$ with Unicode equivalents
    newHeading = newHeading.replace(/\$([^$]+)\$/g, (mathMatch, mathContent) => {
      let unicode = mathContent.trim();

      // Try direct replacement from our mapping
      if (typstToUnicode[unicode]) {
        modified = true;
        return typstToUnicode[unicode];
      }

      // Try to replace parts of the content
      for (const [typst, uni] of Object.entries(typstToUnicode)) {
        // Match whole words or with common separators
        const regex = new RegExp(`\\b${typst.replace(/\./g, '\\.')}\\b`, 'g');
        if (regex.test(unicode)) {
          unicode = unicode.replace(regex, uni);
          modified = true;
        }
      }

      // If we modified it, return the unicode version, otherwise keep the $...$
      return modified ? unicode : mathMatch;
    });

    return `${hashes} ${newHeading}`;
  });

  return { converted, modified };
}

// Process a single file
async function processFile(filePath) {
  const content = await readFile(filePath, 'utf-8');
  const { converted, modified } = convertTypstInHeadings(content);

  if (modified) {
    await writeFile(filePath, converted);
    return true;
  }

  return false;
}

// Main function
async function main() {
  console.log('üîç Finding MDX files...');
  const contentDir = join(__dirname, '../src/content/docs');
  const mdxFiles = await findMdxFiles(contentDir);
  console.log(`Found ${mdxFiles.length} MDX files\n`);

  let modifiedCount = 0;

  for (const file of mdxFiles) {
    console.log(`üìÑ Processing: ${file}`);
    const modified = await processFile(file);

    if (modified) {
      modifiedCount++;
      console.log('  ‚úÖ Converted Typst math to Unicode in headings');
    } else {
      console.log('  ‚è≠Ô∏è  No Typst math in headings');
    }
  }

  console.log(`\n‚ú® Done! Modified ${modifiedCount} file(s)`);
}

main().catch(console.error);
