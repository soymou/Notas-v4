import { readdir, readFile, writeFile } from 'fs/promises';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));

// Mapping of LaTeX commands to Unicode characters
const latexToUnicode = {
  // Greek letters (lowercase)
  '\\alpha': 'Œ±',
  '\\beta': 'Œ≤',
  '\\gamma': 'Œ≥',
  '\\delta': 'Œ¥',
  '\\epsilon': 'Œµ',
  '\\zeta': 'Œ∂',
  '\\eta': 'Œ∑',
  '\\theta': 'Œ∏',
  '\\iota': 'Œπ',
  '\\kappa': 'Œ∫',
  '\\lambda': 'Œª',
  '\\mu': 'Œº',
  '\\nu': 'ŒΩ',
  '\\xi': 'Œæ',
  '\\pi': 'œÄ',
  '\\rho': 'œÅ',
  '\\sigma': 'œÉ',
  '\\tau': 'œÑ',
  '\\upsilon': 'œÖ',
  '\\phi': 'œÜ',
  '\\chi': 'œá',
  '\\psi': 'œà',
  '\\omega': 'œâ',

  // Greek letters (uppercase)
  '\\Gamma': 'Œì',
  '\\Delta': 'Œî',
  '\\Theta': 'Œò',
  '\\Lambda': 'Œõ',
  '\\Xi': 'Œû',
  '\\Pi': 'Œ†',
  '\\Sigma': 'Œ£',
  '\\Upsilon': 'Œ•',
  '\\Phi': 'Œ¶',
  '\\Psi': 'Œ®',
  '\\Omega': 'Œ©',

  // Arrows
  '\\rightarrow': '‚Üí',
  '\\leftarrow': '‚Üê',
  '\\leftrightarrow': '‚Üî',
  '\\Rightarrow': '‚áí',
  '\\Leftarrow': '‚áê',
  '\\Leftrightarrow': '‚áî',
  '\\to': '‚Üí',

  // Math operators
  '\\times': '√ó',
  '\\div': '√∑',
  '\\pm': '¬±',
  '\\mp': '‚àì',
  '\\cdot': '¬∑',

  // Relations
  '\\leq': '‚â§',
  '\\geq': '‚â•',
  '\\neq': '‚â†',
  '\\approx': '‚âà',
  '\\equiv': '‚â°',
  '\\sim': '‚àº',
  '\\cong': '‚âÖ',
  '\\in': '‚àà',
  '\\notin': '‚àâ',
  '\\subset': '‚äÇ',
  '\\supset': '‚äÉ',
  '\\subseteq': '‚äÜ',
  '\\supseteq': '‚äá',

  // Logic
  '\\forall': '‚àÄ',
  '\\exists': '‚àÉ',
  '\\neg': '¬¨',
  '\\land': '‚àß',
  '\\lor': '‚à®',
  '\\implies': '‚áí',
  '\\iff': '‚áî',

  // Sets
  '\\emptyset': '‚àÖ',
  '\\cup': '‚à™',
  '\\cap': '‚à©',

  // Other
  '\\infty': '‚àû',
  '\\partial': '‚àÇ',
  '\\nabla': '‚àá',
  '\\sum': '‚àë',
  '\\prod': '‚àè',
  '\\int': '‚à´',
  '\\sqrt': '‚àö',
};

// Find all MDX files
async function findMdxFiles(dir) {
  const files = [];
  const entries = await readdir(dir, { withFileTypes: true });

  for (const entry of entries) {
    const fullPath = join(dir, entry.name);
    if (entry.isDirectory()) {
      files.push(...await findMdxFiles(fullPath));
    } else if (entry.name.endsWith('.mdx') || entry.name.endsWith('.md')) {
      files.push(fullPath);
    }
  }

  return files;
}

// Convert LaTeX in heading to Unicode
function convertHeadingLatex(line) {
  // Only process lines that are headings (start with #)
  if (!line.match(/^#{1,6}\s/)) {
    return line;
  }

  let converted = line;
  let changed = false;

  // Find all $...$ patterns in the heading
  const mathMatches = [...line.matchAll(/\$([^$]+)\$/g)];

  for (const match of mathMatches) {
    const mathContent = match[1];
    let unicodeContent = mathContent;

    // Replace each LaTeX command with Unicode
    for (const [latex, unicode] of Object.entries(latexToUnicode)) {
      if (unicodeContent.includes(latex)) {
        unicodeContent = unicodeContent.replaceAll(latex, unicode);
        changed = true;
      }
    }

    // Remove extra spaces and braces
    unicodeContent = unicodeContent.replace(/\{|\}/g, '').trim();

    // Replace the entire $...$ with the Unicode version
    converted = converted.replace(match[0], unicodeContent);
  }

  if (changed) {
    console.log(`  ‚úèÔ∏è  ${line.trim()} ‚Üí ${converted.trim()}`);
  }

  return converted;
}

// Process a single file
async function processFile(filePath) {
  const content = await readFile(filePath, 'utf-8');
  const lines = content.split('\n');
  let modified = false;

  const newLines = lines.map(line => {
    const converted = convertHeadingLatex(line);
    if (converted !== line) {
      modified = true;
    }
    return converted;
  });

  if (modified) {
    await writeFile(filePath, newLines.join('\n'));
    return true;
  }

  return false;
}

// Main function
async function main() {
  console.log('üîç Finding MDX/MD files...');
  const contentDir = join(__dirname, '../src/content/docs');
  const files = await findMdxFiles(contentDir);
  console.log(`Found ${files.length} files\n`);

  let modifiedCount = 0;

  for (const file of files) {
    console.log(`üìÑ Processing: ${file}`);
    const modified = await processFile(file);

    if (modified) {
      modifiedCount++;
      console.log('  ‚úÖ Modified');
    } else {
      console.log('  ‚è≠Ô∏è  No LaTeX in headings');
    }
    console.log();
  }

  console.log(`\n‚ú® Done! Modified ${modifiedCount} file(s)`);
}

main().catch(console.error);
