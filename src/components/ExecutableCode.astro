---
import { codeToHtml } from 'shiki';

interface Props {
  language: string;
  code: string;
  output?: string;
  showOutput?: boolean;
  id?: string;
  session?: string;
  filename?: string;
  eval?: string;
}

const { language, code, output: manualOutput, showOutput = true, id, session, filename, eval: evalProp } = Astro.props;
const shouldEval = evalProp !== 'false';

// Strip leading and trailing newlines from code
const cleanCode = code.replace(/^\n+|\n+$/g, '').trim();

// Load outputs from JSON if id is provided and eval is true
let autoOutput = null;
if (id && !manualOutput && shouldEval) {
  try {
    // Get filename from Astro.url
    const filename = Astro.url.pathname.split('/').filter(Boolean).pop() || 'index';
    const prefixedId = `${filename}::${id}`;

    const outputs = await import('../code-outputs.json');
    autoOutput = outputs.default[prefixedId];
  } catch (e) {
    // File doesn't exist yet, that's okay
  }
}

const finalOutput = manualOutput || autoOutput;
const cleanOutput = finalOutput ? finalOutput.replace(/^\n+|\n+$/g, '').trim() : null;

const highlightedCode = await codeToHtml(cleanCode, {
  lang: language,
  theme: 'github-dark'
});

const highlightedOutput = cleanOutput ? await codeToHtml(cleanOutput, {
  lang: 'text',
  theme: 'github-dark'
}) : null;
---

<div class="executable-code-block">
  <div class="code-section">
    <div class="code-header">
      <span class="language-label">{language}</span>
      {filename && <span class="filename-label">{filename}</span>}
    </div>
    <div set:html={highlightedCode} />
  </div>

  {showOutput && shouldEval && finalOutput && (
    <div class="output-section">
      <div class="output-header">
        <span class="output-label">Output</span>
      </div>
      <div set:html={highlightedOutput} />
    </div>
  )}
</div>
