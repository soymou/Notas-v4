{
  "how-to-use::my-block": "Hello, World!",
  "how-to-use::how-to-use-1": "Error:   File \"/tmp/temp_1761083374006.py\", line 2\n    You can also use a simpler fence syntax that gets automatically converted:\n        ^^^\nSyntaxError: invalid syntax",
  "how-to-use::block-1": "x + y = 30",
  "how-to-use::block-2": "x + y = 30\nx + y = 30",
  "how-to-use::how-to-use-2": "",
  "how-to-use::python-example": "120",
  "how-to-use::how-to-use-3": "",
  "how-to-use::lean-example": "[{\"statement\":\"def double (x : Nat) : Nat := x + x\",\"output\":null},{\"statement\":\"#eval double 21\",\"output\":\"42\"}]",
  "how-to-use::how-to-use-4": "",
  "how-to-use::how-to-use-5": "Error:   File \"/tmp/temp_1761083374749.py\", line 2\n    1. **Write your MDX file** using \n               ^^^^\nSyntaxError: invalid syntax",
  "how-to-use::setup": "",
  "how-to-use::showcase-fibonacci": "0 1 1 2 3 5 8 13 21 34",
  "how-to-use::showcase-lean": "[{\"statement\":\"def compose {α β γ : Type} (g : β → γ) (f : α → β) : α → γ :=\\n  fun x => g (f x)\",\"output\":null},{\"statement\":\"def double (x : Nat) : Nat := x + x\",\"output\":null},{\"statement\":\"def triple (x : Nat) : Nat := x + x + x\",\"output\":null},{\"statement\":\"#eval (compose triple double) 5\",\"output\":\"30\"}]",
  "how-to-use::showcase-rust": "Error: /bin/sh: line 1: rustc: command not found",
  "how-to-use::showcase-data-1": "Original data: [23, 45, 12, 67, 34, 89, 56]",
  "how-to-use::showcase-data-2": "Original data: [23, 45, 12, 67, 34, 89, 56]\nMean: 46.57\nMedian: 45",
  "how-to-use::showcase-data-3": "Original data: [23, 45, 12, 67, 34, 89, 56]\nMean: 46.57\nMedian: 45\nSorted: [12, 23, 34, 45, 56, 67, 89]\nMin: 12, Max: 89",
  "basicos-nix::uno": "2",
  "basicos-nix::dos": "3",
  "basicos-nix::tres": "1",
  "basicos-nix::cuatro": "[ 1 2 3 ]",
  "conociendo::conociendo-1": "3",
  "conociendo::conociendo-2": "11",
  "conociendo::conociendo-3": "\"Hello Lean\"",
  "conociendo::conociendo-4": "\"It is no\"",
  "conociendo::conociendo-5": "3",
  "conociendo::conociendo-6": "1 - 2 : Nat",
  "conociendo::conociendo-7": "",
  "conociendo::conociendo-8": "[{\"statement\":\"#eval String.append \\\"Hola \\\" lean\",\"output\":\"\\\"Hola Lean\\\"\"}]",
  "conociendo::conociendo-9": "[{\"statement\":\"def add1 (n : Nat) : Nat := n + 1\",\"output\":null},{\"statement\":\"#eval add1 7\",\"output\":\"8\"}]",
  "conociendo::conociendo-10": "[{\"statement\":\"def maximum (n : Nat) (k : Nat) : Nat := \\n  if n < k then \\n    k \\n  else n\",\"output\":null},{\"statement\":\"#eval maximum 2 3\",\"output\":\"3\"}]",
  "conociendo::conociendo-11": "[{\"statement\":\"def Str : Type := String\",\"output\":null},{\"statement\":\"def palabra : Str := \\\"Hola\\\"\",\"output\":null},{\"statement\":\"#check palabra\",\"output\":\"palabra : Str\"}]",
  "dependiente::dependiente-1": "[{\"statement\":\"def m  : Nat  := 1  -- m es un número natural\",\"output\":null},{\"statement\":\"def n  : Nat  := 0\",\"output\":null},{\"statement\":\"def b1 : Bool := true -- b1 es un booleano\",\"output\":null},{\"statement\":\"def b2 : Bool := false\",\"output\":null}]",
  "dependiente::dependiente-2": "[{\"statement\":\"#check m\",\"output\":\"m : Nat\"},{\"statement\":\"#check n\",\"output\":\"n : Nat\"},{\"statement\":\"#check n + 0\",\"output\":\"n + 0 : Nat\"},{\"statement\":\"#check m * (n + 0)\",\"output\":\"m * (n + 0) : Nat\"},{\"statement\":\"#check b1\",\"output\":\"b1 : Bool\"},{\"statement\":\"#check b1 && b2 -- && es el \\\"y\\\" booleano\",\"output\":\"b1 && b2 : Bool\"},{\"statement\":\"#check b1 || b2 -- || es el \\\"o\\\" booleano\",\"output\":\"b1 || b2 : Bool\"},{\"statement\":\"#check true\",\"output\":\"Bool.true : Bool\"},{\"statement\":\"/- Evaluar -/\",\"output\":null},{\"statement\":\"#eval 5 * 4\",\"output\":\"20\"},{\"statement\":\"#eval m + 2\",\"output\":\"3\"},{\"statement\":\"#eval b1 && b2\",\"output\":\"false\"}]",
  "dependiente::dependiente-3": "[{\"statement\":\"#check Nat → Nat\",\"output\":\"Nat → Nat : Type\"},{\"statement\":\"#check Nat × Nat\",\"output\":\"Nat × Nat : Type\"},{\"statement\":\"#check Prod Nat Nat\",\"output\":\"Nat × Nat : Type\"},{\"statement\":\"#check Nat → Nat → Nat\",\"output\":\"Nat → Nat → Nat : Type\"},{\"statement\":\"#check Nat.succ\",\"output\":\"Nat.succ (n : Nat) : Nat\"},{\"statement\":\"#check (0, 1)\",\"output\":\"(0, 1) : Nat × Nat\"},{\"statement\":\"#check Nat.add\",\"output\":\"Nat.add : Nat → Nat → Nat\"},{\"statement\":\"#check Nat.succ 2\",\"output\":\"Nat.succ 2 : Nat\"},{\"statement\":\"#check (5, 9).fst\",\"output\":\"(5, 9).fst : Nat\"},{\"statement\":\"#eval (5,9).snd\",\"output\":\"9\"}]",
  "dependiente::dependiente-4": "[{\"statement\":\"#check Nat\",\"output\":\"Nat : Type\"},{\"statement\":\"#check Bool\",\"output\":\"Bool : Type\"},{\"statement\":\"#check Nat → Bool\",\"output\":\"Nat → Bool : Type\"},{\"statement\":\"#check Nat × Bool\",\"output\":\"Nat × Bool : Type\"},{\"statement\":\"#check Nat → Nat\",\"output\":\"Nat → Nat : Type\"}]",
  "dependiente::dependiente-5": "[{\"statement\":\"def α : Type := Nat\",\"output\":null},{\"statement\":\"def β  : Type := Bool\",\"output\":null},{\"statement\":\"def F      : Type → Type := List\",\"output\":null},{\"statement\":\"def G      : Type → Type → Type := Prod\",\"output\":null},{\"statement\":\"#check α\",\"output\":\"α : Type\"},{\"statement\":\"#check F α\",\"output\":\"F α : Type\"},{\"statement\":\"#check G α\",\"output\":\"G α : Type → Type\"},{\"statement\":\"#check G α β\",\"output\":\"G α β : Type\"},{\"statement\":\"#check G α Nat\",\"output\":\"G α Nat : Type\"}]",
  "dependiente::dependiente-6": "[{\"statement\":\"#check Type\",\"output\":\"Type : Type 1\"},{\"statement\":\"#check Type 1\",\"output\":\"Type 1 : Type 2\"},{\"statement\":\"#check Type 2\",\"output\":\"Type 2 : Type 3\"},{\"statement\":\"#check Type 3\",\"output\":\"Type 3 : Type 4\"}]",
  "dependiente::dependiente-7": "List.{u} (α : Type u) : Type u",
  "dependiente::dependiente-8": "Prod.{u, v} (α : Type u) (β : Type v) : Type (max u v)",
  "dependiente::dependiente-9": "[{\"statement\":\"universe u\",\"output\":null},{\"statement\":\"def F (α : Type u) : Type u := Prod α α\",\"output\":null},{\"statement\":\"#check F\",\"output\":\"F.{u} (α : Type u) : Type u\"}]",
  "dependiente::dependiente-10": "[{\"statement\":\"def F.{u} (α : Type u) : Type u := Prod α α\",\"output\":null},{\"statement\":\"#check F\",\"output\":\"F.{u} (α : Type u) : Type u\"}]",
  "dependiente::dependiente-11": "[{\"statement\":\"#check fun (x : Nat) => x + 5\",\"output\":\"fun x => x + 5 : Nat → Nat\"},{\"statement\":\"#check λ (x : Nat) => x + 5\",\"output\":\"fun x => x + 5 : Nat → Nat\"}]",
  "dependiente::dependiente-12": "[{\"statement\":\"#check fun x => x + 5\",\"output\":\"fun x => x + 5 : Nat → Nat\"},{\"statement\":\"#check λ x => x + 5\",\"output\":\"fun x => x + 5 : Nat → Nat\"}]",
  "dependiente::dependiente-13": "15",
  "dependiente::dependiente-14": "[{\"statement\":\"#check fun x: Nat => fun y : Bool => if not y then x + 1 else x + 2\",\"output\":\"fun x y => if (!y) = true then x + 1 else x + 2 : Nat → Bool → Nat\"},{\"statement\":\"#check fun (x : Nat) (y : Bool) => if not y then x + 1 else x + 2\",\"output\":\"fun x y => if (!y) = true then x + 1 else x + 2 : Nat → Bool → Nat\"},{\"statement\":\"#check fun x y => if not y then x + 1 else x + 2\",\"output\":\"fun x y => if (!y) = true then x + 1 else x + 2 : Nat → Bool → Nat\"}]",
  "dependiente::dependiente-15": "[{\"statement\":\"def f (n : Nat) : String := toString n\",\"output\":null},{\"statement\":\"def g (s : String) : Bool := s.length > 0\",\"output\":null},{\"statement\":\"#check fun x : Nat => x\",\"output\":\"fun x => x : Nat → Nat\"},{\"statement\":\"#check fun x : Nat => true\",\"output\":\"fun x => true : Nat → Bool\"},{\"statement\":\"#check fun x : Nat => g (f x)\",\"output\":\"fun x => g (f x) : Nat → Bool\"},{\"statement\":\"#check fun x => g (f x)\",\"output\":\"fun x => g (f x) : Nat → Bool\"}]",
  "dependiente::dependiente-16": "fun g f x => g (f x) : (String → Bool) → (Nat → String) → Nat → Bool",
  "dependiente::dependiente-17": "fun α β γ g f x => g (f x) : (α β γ : Type) → (β → γ) → (α → β) → α → γ",
  "dependiente::dependiente-18": "",
  "dependiente::dependiente-19": "[{\"statement\":\"def compose (α β γ : Type) (g : β → γ) (f : α → β) (x : α) : γ :=\\n  g (f x)\",\"output\":null},{\"statement\":\"def doTwice (α : Type) (h : α → α) (x : α) : α := \\n  h (h x)\",\"output\":null},{\"statement\":\"def doThrice (α : Type) (h : α → α) (x : α) : α :=\\n  h (h (h x))\",\"output\":null}]",
  "dependiente::dependiente-20": "[{\"statement\":\"variable (α β γ : Type)\",\"output\":null},{\"statement\":\"def compose (g : β → γ) (g : α → β) (x : α) : γ := \\n  g (f x)\",\"output\":\"/tmp/temp_1761083387629.lean:4:5: error: unknown identifier 'f'\"},{\"statement\":\"def doTwice (h : α → α) (x : α) : α := \\n  h (h x)\",\"output\":\"/tmp/temp_1761083387766.lean:4:5: error: unknown identifier 'f'\"},{\"statement\":\"def doThrice (h : α → α) (x : α) : α := \\n  h (h (h x))\",\"output\":\"/tmp/temp_1761083387892.lean:4:5: error: unknown identifier 'f'\"}]",
  "dependiente::dependiente-21": "[{\"statement\":\"section useful\",\"output\":null},{\"statement\":\"variable (α β γ : Type)\",\"output\":null},{\"statement\":\"variable (g : β → γ) (f : α → β) (h : α → α)\",\"output\":null},{\"statement\":\"variable (x : α)\",\"output\":null},{\"statement\":\"def compose := g ( f x )\",\"output\":null},{\"statement\":\"def doTwice := h (h x)\",\"output\":null},{\"statement\":\"def doThrice := h (h (h x))\\nend useful\",\"output\":null}]",
  "dependiente::dependiente-22": "[{\"statement\":\"namespace Foo\",\"output\":null},{\"statement\":\"def a : Nat := 5\",\"output\":null},{\"statement\":\"def f (x : Nat) : Nat := x + 7\",\"output\":null},{\"statement\":\"def fa : Nat := f a\",\"output\":null},{\"statement\":\"def ffa : Nat := f (f a)\",\"output\":null},{\"statement\":\"#check a\",\"output\":\"Foo.a : Nat\"},{\"statement\":\"end Foo\",\"output\":null},{\"statement\":\"#check Foo.a\",\"output\":\"Foo.a : Nat\"},{\"statement\":\"open Foo\",\"output\":null},{\"statement\":\"#check a\",\"output\":\"Foo.a : Nat\"}]",
  "dependiente::dependiente-23": "[{\"statement\":\"def cons (α : Type) (a : α) (as : List α) : List α := \\n  List.cons a as\",\"output\":null},{\"statement\":\"#check cons Nat\",\"output\":\"cons Nat : Nat → List Nat → List Nat\"},{\"statement\":\"#check cons Bool\",\"output\":\"cons Bool : Bool → List Bool → List Bool\"},{\"statement\":\"#check cons\",\"output\":\"cons (α : Type) (a : α) (as : List α) : List α\"}]",
  "dependiente::dependiente-24": "[{\"statement\":\"universe u v\",\"output\":null},{\"statement\":\"def f (α : Type u) (β : α → Type v) (a : α) (b : β a) : (a : α) × β a := \\n  ⟨ a, b ⟩\",\"output\":null},{\"statement\":\"def g (α : Type u) (β : α → Type v) (a : α) (b : β a) : Σ a : α, β a := \\n  Sigma.mk a b\",\"output\":null},{\"statement\":\"def h1 (x : Nat) : Nat := \\n  (f Type (fun α => α) Nat x).2\",\"output\":null},{\"statement\":\"#eval h1 5\",\"output\":\"5\"},{\"statement\":\"def h2 (x : Nat) : Nat := \\n  (g Type (fun α => α) Nat x).2\",\"output\":null},{\"statement\":\"#eval h2 5\",\"output\":\"5\"}]",
  "dependiente::dependiente-25": "[{\"statement\":\"universe u\",\"output\":null},{\"statement\":\"def Lst (α : Type u) : Type u := List α\",\"output\":null},{\"statement\":\"def Lst.cons (α : Type u) (a : α) (as : Lst α) : Lst α := List.cons a as\",\"output\":null},{\"statement\":\"def Lst.nil (α : Type u) : Lst α := List.nil\",\"output\":null},{\"statement\":\"def Lst.append (α : Type u) (as bs : Lst α) : Lst α := List.append as bs\",\"output\":null},{\"statement\":\"#check Lst\",\"output\":\"Lst.{u} (α : Type u) : Type u\"},{\"statement\":\"#check Lst.cons\",\"output\":\"Lst.cons.{u} (α : Type u) (a : α) (as : Lst α) : Lst α\"},{\"statement\":\"#check Lst.nil\",\"output\":\"Lst.nil.{u} (α : Type u) : Lst α\"},{\"statement\":\"#check Lst.append\",\"output\":\"Lst.append.{u} (α : Type u) (as bs : Lst α) : Lst α\"}]",
  "dependiente::dependiente-26": "[{\"statement\":\"#check Lst.cons Nat 0 (Lst.nil Nat)\",\"output\":\"Lst.cons Nat 0 (Lst.nil Nat) : Lst Nat\"},{\"statement\":\"def as1 : Lst Nat := Lst.nil Nat\",\"output\":null},{\"statement\":\"def bs1 : Lst Nat := Lst.cons Nat 5 (Lst.nil Nat)\",\"output\":null},{\"statement\":\"#check Lst.append Nat as1 bs1\",\"output\":\"Lst.append Nat as1 bs1 : Lst Nat\"}]",
  "dependiente::dependiente-27": "[{\"statement\":\"#check Lst.cons _ 0 (Lst.nil _)\",\"output\":\"Lst.cons Nat 0 (Lst.nil Nat) : Lst Nat\"},{\"statement\":\"def as : Lst Nat := Lst.nil _\",\"output\":null},{\"statement\":\"def bs : Lst Nat := Lst.cons _ 5 (Lst.nil _)\",\"output\":null},{\"statement\":\"#check Lst.append _ as bs\",\"output\":\"Lst.append Nat as bs : Lst Nat\"}]",
  "dependiente::dependiente-28": "[{\"statement\":\"universe u\",\"output\":null},{\"statement\":\"def Lst (α : Type u) : Type u := List α\",\"output\":null},{\"statement\":\"def Lst.cons {α : Type u} (a : α) (as : Lst α) : Lst α := \\n  List.cons a as\",\"output\":null},{\"statement\":\"def Lst.nil {α : Type u} : Lst α := List.nil\",\"output\":null},{\"statement\":\"def Lst.append {α : Type u} (as bs : Lst α) : Lst α := List.append as bs\",\"output\":null}]",
  "dependiente::dependiente-29": "[{\"statement\":\"universe u\",\"output\":null},{\"statement\":\"def ident {α : Type u} (x : α) := x\",\"output\":null},{\"statement\":\"#check ident\",\"output\":\"ident.{u} {α : Type u} (x : α) : α\"},{\"statement\":\"#check (ident)\",\"output\":\"ident : ?m.22 → ?m.22\"},{\"statement\":\"#check ident 1\",\"output\":\"ident 1 : Nat\"},{\"statement\":\"#check ident \\\"hello\\\"\",\"output\":\"ident \\\"hello\\\" : String\"},{\"statement\":\"#check @ident\",\"output\":\"@ident : {α : Type u_1} → α → α\"}]",
  "dependiente::dependiente-30": "[{\"statement\":\"universe u \\nsection\",\"output\":null},{\"statement\":\"variable {α : Type u}\",\"output\":null},{\"statement\":\"variable (x : α)\",\"output\":null},{\"statement\":\"def ident := x\\nend\",\"output\":null}]",
  "proposiciones::proposiciones-1": "[{\"statement\":\"variable {p q : Prop}\",\"output\":null},{\"statement\":\"theorem t1 : p → q → p := \\n  fun hp : p => fun hq : q => hp\",\"output\":null},{\"statement\":\"#check t1\",\"output\":\"t1 {p q : Prop} : p → q → p\"}]",
  "proposiciones::proposiciones-2": "[{\"statement\":\"variable {p q : Prop}\",\"output\":null},{\"statement\":\"theorem t1 : p → q → p := \\n  fun hp : p => fun hq : q => hp\",\"output\":null},{\"statement\":\"#print t1\",\"output\":\"theorem t1 : ∀ {p q : Prop}, p → q → p :=\\nfun {p q} hp hq => hp\"}]",
  "proposiciones::proposiciones-3": "[{\"statement\":\"variable {p q : Prop}\",\"output\":null},{\"statement\":\"theorem t1 : p → q → p := \\n  fun hp : p => \\n  fun hq : q =>\\n  show p from hp\",\"output\":null}]",
  "proposiciones::proposiciones-4": "[{\"statement\":\"variable {p q : Prop}\",\"output\":null},{\"statement\":\"theorem t1 (hp : p) (hq : q) : p := hp\",\"output\":null},{\"statement\":\"#print t1\",\"output\":\"theorem t1 : ∀ {p q : Prop}, p → q → p :=\\nfun {p q} hp hq => hp\"}]",
  "proposiciones::proposiciones-5": "[{\"statement\":\"variable {p q : Prop}\",\"output\":null},{\"statement\":\"theorem t1 (hp : p) (hq : q) : p := hp\",\"output\":null},{\"statement\":\"axiom hp : p\",\"output\":null},{\"statement\":\"theorem t2 : q → p := t1 hp\",\"output\":null}]",
  "proposiciones::proposiciones-6": "[{\"statement\":\"Faxiom unsound : False\",\"output\":\"/tmp/temp_1761083400568.lean:2:0: error: unexpected identifier; expected command\"},{\"statement\":\"theorem ex : 1 = 0 := \\n  False.elim unsound\",\"output\":\"/tmp/temp_1761083400684.lean:2:0: error: unexpected identifier; expected command\\n/tmp/temp_1761083400684.lean:4:13: error: unknown identifier 'unsound'\"}]"
}