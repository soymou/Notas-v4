{
  "how-to-use::my-block": "Hello, World!",
  "how-to-use::how-to-use-1": "Error:   File \"/tmp/temp_1761031456803.py\", line 2\n    You can also use a simpler fence syntax that gets automatically converted:\n        ^^^\nSyntaxError: invalid syntax",
  "how-to-use::block-1": "x + y = 30",
  "how-to-use::block-2": "x + y = 30\nx + y = 30",
  "how-to-use::how-to-use-2": "",
  "how-to-use::python-example": "120",
  "how-to-use::how-to-use-3": "",
  "how-to-use::lean-example": "[{\"statement\":\"def double (x : Nat) : Nat := x + x\",\"output\":null},{\"statement\":\"#eval double 21\",\"output\":\"42\"}]",
  "how-to-use::how-to-use-4": "",
  "how-to-use::how-to-use-5": "Error:   File \"/tmp/temp_1761031457594.py\", line 2\n    1. **Write your MDX file** using \n               ^^^^\nSyntaxError: invalid syntax",
  "how-to-use::setup": "",
  "how-to-use::showcase-fibonacci": "0 1 1 2 3 5 8 13 21 34",
  "how-to-use::showcase-lean": "[{\"statement\":\"def compose {α β γ : Type} (g : β → γ) (f : α → β) : α → γ :=\",\"output\":\"/tmp/temp_1761031457736.lean:1:61: error: unexpected end of input\"},{\"statement\":\"fun x => g (f x)\",\"output\":null},{\"statement\":\"def double (x : Nat) : Nat := x + x\",\"output\":null},{\"statement\":\"def triple (x : Nat) : Nat := x + x + x\",\"output\":null},{\"statement\":\"#eval (compose triple double) 5\",\"output\":\"30\"}]",
  "how-to-use::showcase-rust": "Error: /bin/sh: line 1: rustc: command not found",
  "how-to-use::showcase-data-1": "Original data: [23, 45, 12, 67, 34, 89, 56]",
  "how-to-use::showcase-data-2": "Original data: [23, 45, 12, 67, 34, 89, 56]\nMean: 46.57\nMedian: 45",
  "how-to-use::showcase-data-3": "Original data: [23, 45, 12, 67, 34, 89, 56]\nMean: 46.57\nMedian: 45\nSorted: [12, 23, 34, 45, 56, 67, 89]\nMin: 12, Max: 89",
  "basicos-nix::uno": "2",
  "basicos-nix::dos": "3",
  "basicos-nix::tres": "1",
  "basicos-nix::cuatro": "[ 1 2 3 ]",
  "conociendo::conociendo-1": "3",
  "conociendo::conociendo-2": "11",
  "conociendo::conociendo-3": "\"Hello Lean\"",
  "conociendo::conociendo-4": "\"It is no\"",
  "conociendo::conociendo-5": "3",
  "conociendo::conociendo-6": "1 - 2 : Nat",
  "conociendo::conociendo-7": "",
  "conociendo::conociendo-8": "[{\"statement\":\"def lean : String := \\\"Lean\\\"\",\"output\":null},{\"statement\":\"#eval String.append \\\"Hola \\\" lean\",\"output\":\"\\\"Hola Lean\\\"\"}]",
  "conociendo::conociendo-9": "[{\"statement\":\"def add1 (n : Nat) : Nat := n + 1\",\"output\":null},{\"statement\":\"#eval add1 7\",\"output\":\"8\"}]",
  "conociendo::conociendo-10": "[{\"statement\":\"def maximum (n : Nat) (k : Nat) : Nat :=\",\"output\":\"/tmp/temp_1761031460136.lean:1:41: error: unexpected end of input\"},{\"statement\":\"if n < k then\",\"output\":\"/tmp/temp_1761031460274.lean:2:16: error: unexpected end of input\"},{\"statement\":\"k\",\"output\":\"/tmp/temp_1761031460399.lean:3:6: error: unexpected end of input; expected 'else'\"},{\"statement\":\"else n\",\"output\":null},{\"statement\":\"#eval maximum 2 3\",\"output\":\"3\"}]",
  "conociendo::conociendo-11": "[{\"statement\":\"def Str : Type := String\",\"output\":null},{\"statement\":\"def palabra : Str := \\\"Hola\\\"\",\"output\":null},{\"statement\":\"#check palabra\",\"output\":\"palabra : Str\"}]",
  "dependiente::dependiente-1": "[{\"statement\":\"def m  : Nat  := 1  -- m es un número natural\",\"output\":null},{\"statement\":\"def n  : Nat  := 0\",\"output\":null},{\"statement\":\"def b1 : Bool := true -- b1 es un booleano\",\"output\":null},{\"statement\":\"def b2 : Bool := false\",\"output\":null}]",
  "dependiente::uno": "[{\"statement\":\"def m  : Nat  := 1  -- m es un número natural\",\"output\":null},{\"statement\":\"def n  : Nat  := 0\",\"output\":null},{\"statement\":\"def b1 : Bool := true -- b1 es un booleano\",\"output\":null},{\"statement\":\"def b2 : Bool := false\",\"output\":null},{\"statement\":\"/- Verificar tipos -/\",\"output\":null},{\"statement\":\"#check m\",\"output\":\"m : Nat\"},{\"statement\":\"#check n\",\"output\":\"n : Nat\"},{\"statement\":\"#check n + 0\",\"output\":\"n + 0 : Nat\"},{\"statement\":\"#check m * (n + 0)\",\"output\":\"m * (n + 0) : Nat\"},{\"statement\":\"#check b1\",\"output\":\"b1 : Bool\"},{\"statement\":\"#check b1 && b2 -- && es el \\\"y\\\" booleano\",\"output\":\"b1 && b2 : Bool\"},{\"statement\":\"#check b1 || b2 -- || es el \\\"o\\\" booleano\",\"output\":\"b1 || b2 : Bool\"},{\"statement\":\"#check true\",\"output\":\"Bool.true : Bool\"},{\"statement\":\"/- Evaluar -/\",\"output\":null},{\"statement\":\"#eval 5 * 4\",\"output\":\"20\"},{\"statement\":\"#eval m + 2\",\"output\":\"3\"},{\"statement\":\"#eval b1 && b2\",\"output\":\"false\"}]",
  "dependiente::dependiente-2": "[{\"statement\":\"#check Nat → Nat\",\"output\":\"Nat → Nat : Type\"},{\"statement\":\"#check Nat × Nat\",\"output\":\"Nat × Nat : Type\"},{\"statement\":\"#check Prod Nat Nat\",\"output\":null},{\"statement\":\"#check Nat → Nat → Nat\",\"output\":\"Nat → Nat → Nat : Type\"},{\"statement\":\"#check Nat.succ\",\"output\":\"Nat.succ (n : Nat) : Nat\"},{\"statement\":\"#check (0, 1)\",\"output\":\"(0, 1) : Nat × Nat\"},{\"statement\":\"#check Nat.add\",\"output\":\"Nat.add : Nat → Nat → Nat\"},{\"statement\":\"#check Nat.succ 2\",\"output\":\"Nat.succ 2 : Nat\"},{\"statement\":\"#check (5, 9).fst\",\"output\":\"(5, 9).fst : Nat\"},{\"statement\":\"#eval (5,9).snd\",\"output\":\"9\"}]",
  "dependiente::dependiente-3": "[{\"statement\":\"#check Nat\",\"output\":\"Nat : Type\"},{\"statement\":\"#check Bool\",\"output\":\"Bool : Type\"},{\"statement\":\"#check Nat → Bool\",\"output\":\"Nat → Bool : Type\"},{\"statement\":\"#check Nat × Bool\",\"output\":\"Nat × Bool : Type\"},{\"statement\":\"#check Nat → Nat\",\"output\":\"Nat → Nat : Type\"}]",
  "dependiente::dependiente-4": "[{\"statement\":\"def α : Type := Nat\",\"output\":null},{\"statement\":\"def β  : Type := Bool\",\"output\":null},{\"statement\":\"def F      : Type → Type := List\",\"output\":null},{\"statement\":\"def G      : Type → Type → Type := Prod\",\"output\":null},{\"statement\":\"#check α\",\"output\":\"α : Type\"},{\"statement\":\"#check F α\",\"output\":\"F α : Type\"},{\"statement\":\"#check G α\",\"output\":\"G α : Type → Type\"},{\"statement\":\"#check G α β\",\"output\":\"G α β : Type\"},{\"statement\":\"#check G α Nat\",\"output\":\"G α Nat : Type\"}]",
  "dependiente::dependiente-5": "[{\"statement\":\"#check Type\",\"output\":\"Type : Type 1\"},{\"statement\":\"#check Type 1\",\"output\":\"Type 1 : Type 2\"},{\"statement\":\"#check Type 2\",\"output\":\"Type 2 : Type 3\"},{\"statement\":\"#check Type 3\",\"output\":\"Type 3 : Type 4\"}]"
}