// src/dev/import-fresh.ts
import { statSync } from "fs";
import { createRequire } from "module";
import { pathToFileURL } from "url";
async function importFresh(packageName, callerUrl) {
  const isRelativePath = packageName.startsWith("./") || packageName.startsWith("../");
  if (isRelativePath && !callerUrl) {
    throw new Error(
      `importFresh: callerUrl (import.meta.url) is required when importing relative paths like "${packageName}"`
    );
  }
  const require2 = createRequire(callerUrl || import.meta.url);
  const resolvedPath = (() => {
    try {
      return require2.resolve(packageName);
    } catch (error) {
      if (isRelativePath) {
        const extensions = [
          ".js",
          ".mjs",
          ".cjs",
          ".ts",
          ".mts",
          ".cts",
          "/index.js",
          "/index.mjs",
          "/index.cjs",
          "/index.ts",
          "/index.mts",
          "/index.cts"
        ];
        for (const ext of extensions) {
          try {
            return require2.resolve(packageName + ext);
          } catch {
          }
        }
      }
      throw error;
    }
  })();
  const fileStats = statSync(resolvedPath);
  const newSpecifier = new URL(pathToFileURL(resolvedPath).href);
  newSpecifier.searchParams.set("t", Math.floor(fileStats.mtimeMs).toString());
  return await import(
    /* @vite-ignore */
    newSpecifier.href
  );
}
export {
  importFresh
};
//# sourceMappingURL=import-fresh.js.map