var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stdin_exports = {};
__export(stdin_exports, {
  FetchAccessModel: () => import_fs2.FetchAccessModel,
  FetchPackageRegistry: () => import_package2.FetchPackageRegistry,
  createTypstCompiler: () => import_compiler.createTypstCompiler,
  createTypstRenderer: () => import_renderer.createTypstRenderer,
  createTypstSvgRenderer: () => import_renderer.createTypstSvgRenderer,
  preloadRemoteFonts: () => import_options_init.preloadRemoteFonts,
  preloadSystemFonts: () => import_options_init.preloadSystemFonts,
  rendererBuildInfo: () => import_renderer.rendererBuildInfo
});
module.exports = __toCommonJS(stdin_exports);
var initOptions = __toESM(require("./options.init.cjs"));
var import_options_init = require("./options.init.cjs");
var renderer = __toESM(require("./renderer.cjs"));
var import_renderer = require("./renderer.cjs");
var import_view = require("./render/canvas/view.cjs");
var compiler = __toESM(require("./compiler.cjs"));
var import_fs = require("./fs/index.cjs");
var import_package = require("./fs/package.cjs");
var import_fs2 = require("./fs/index.cjs");
var import_package2 = require("./fs/package.cjs");
var import_compiler = require("./compiler.cjs");
if (typeof window !== "undefined") {
  window.TypstRenderModule = {
    RenderView: import_view.RenderView,
    createTypstRenderer: renderer.createTypstRenderer,
    createTypstSvgRenderer: renderer.createTypstRenderer,
    preloadRemoteFonts: initOptions.preloadRemoteFonts,
    preloadSystemFonts: initOptions.preloadSystemFonts
  };
  window.TypstCompileModule = {
    createTypstCompiler: compiler.createTypstCompiler,
    preloadRemoteFonts: initOptions.preloadRemoteFonts,
    preloadSystemFonts: initOptions.preloadSystemFonts,
    FetchAccessModel: import_fs.FetchAccessModel,
    MemoryAccessModel: import_fs.MemoryAccessModel,
    FetchPackageRegistry: import_package.FetchPackageRegistry,
    withAccessModel: initOptions.withAccessModel,
    withPackageRegistry: initOptions.withPackageRegistry
  };
}
