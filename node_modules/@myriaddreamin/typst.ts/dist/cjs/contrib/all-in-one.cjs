var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stdin_exports = {};
module.exports = __toCommonJS(stdin_exports);
__reExport(stdin_exports, require("./all-in-one-lite.cjs"), module.exports);
var import_snippet = require("./snippet.cjs");
var import_typst_ts_web_compiler_bg = __toESM(require("../../../compiler/pkg/typst_ts_web_compiler_bg.wasm?url"));
var import_typst_ts_renderer_bg = __toESM(require("../../../renderer/pkg/typst_ts_renderer_bg.wasm?url"));
window.$wasm$typst_compiler = import_typst_ts_web_compiler_bg.default;
window.$wasm$typst_renderer = import_typst_ts_renderer_bg.default;
import_snippet.$typst.setCompilerInitOptions({
  getModule: () => window.$wasm$typst_compiler
});
import_snippet.$typst.setRendererInitOptions({
  getModule: () => window.$wasm$typst_renderer
});
