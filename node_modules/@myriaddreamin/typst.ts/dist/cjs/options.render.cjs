var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stdin_exports = {};
__export(stdin_exports, {
  OffscreenRenderCanvasOptions: () => OffscreenRenderCanvasOptions,
  RenderCanvasOptions: () => RenderCanvasOptions
});
module.exports = __toCommonJS(stdin_exports);
const vectorFormats = ["vector"];
class RenderCanvasOptions {
  /**
   * The canvas to render the Typst document.
   */
  canvas;
  /**
   * The page offset to render.
   */
  pageOffset;
  /**
   * The previous render state.
   */
  cacheKey;
  /**
   * Set the background color in format of `^#?[0-9a-f]{6}$`
   *
   * Note: Default to `#ffffff`.
   */
  backgroundColor;
  /**
   * Set the pixel per point scale up the canvas panel.
   *
   * Note: Default to `3`.
   */
  pixelPerPt;
  /**
   * The selection of the data to render.
   * @description `body`: render the body of the document.
   * @description `text`: render the text repr of the document.
   * @description `annnotation`: render the annnotation of the document.
   * @description `semantics`: render the semantics as HTML elements of the document.
   * @default: all of fields set to `true`
   */
  dataSelection;
}
const OffscreenRenderCanvasOptions = RenderCanvasOptions;
