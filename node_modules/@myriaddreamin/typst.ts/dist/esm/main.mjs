import * as initOptions from './options.init.mjs';
export { preloadRemoteFonts, preloadSystemFonts } from './options.init.mjs';
import * as renderer from './renderer.mjs';
export { rendererBuildInfo, createTypstRenderer, createTypstSvgRenderer } from './renderer.mjs';
import { RenderView } from './render/canvas/view.mjs';
import * as compiler from './compiler.mjs';
import { FetchAccessModel, MemoryAccessModel } from './fs/index.mjs';
import { FetchPackageRegistry } from './fs/package.mjs';
export { FetchAccessModel } from './fs/index.mjs';
export { FetchPackageRegistry } from './fs/package.mjs';
export { createTypstCompiler } from './compiler.mjs';
// Export module on window.
if (typeof window !== 'undefined') {
    window.TypstRenderModule = {
        RenderView,
        createTypstRenderer: renderer.createTypstRenderer,
        createTypstSvgRenderer: renderer.createTypstRenderer,
        preloadRemoteFonts: initOptions.preloadRemoteFonts,
        preloadSystemFonts: initOptions.preloadSystemFonts,
    };
    window.TypstCompileModule = {
        createTypstCompiler: compiler.createTypstCompiler,
        preloadRemoteFonts: initOptions.preloadRemoteFonts,
        preloadSystemFonts: initOptions.preloadSystemFonts,
        FetchAccessModel,
        MemoryAccessModel,
        FetchPackageRegistry,
        withAccessModel: initOptions.withAccessModel,
        withPackageRegistry: initOptions.withPackageRegistry,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5tanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFpbi5tdHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLFdBQVcsTUFBTSxvQkFBb0IsQ0FBQztBQVFsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM1RSxPQUFPLEtBQUssUUFBUSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hHLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEtBQUssUUFBUSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR3hELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJELDJCQUEyQjtBQUMzQixJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRSxDQUFDO0lBQ2pDLE1BQWMsQ0FBQyxpQkFBaUIsR0FBRztRQUNsQyxVQUFVO1FBRVYsbUJBQW1CLEVBQUUsUUFBUSxDQUFDLG1CQUFtQjtRQUNqRCxzQkFBc0IsRUFBRSxRQUFRLENBQUMsbUJBQW1CO1FBQ3BELGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxrQkFBa0I7UUFDbEQsa0JBQWtCLEVBQUUsV0FBVyxDQUFDLGtCQUFrQjtLQUNuRCxDQUFDO0lBQ0QsTUFBYyxDQUFDLGtCQUFrQixHQUFHO1FBQ25DLG1CQUFtQixFQUFFLFFBQVEsQ0FBQyxtQkFBbUI7UUFDakQsa0JBQWtCLEVBQUUsV0FBVyxDQUFDLGtCQUFrQjtRQUNsRCxrQkFBa0IsRUFBRSxXQUFXLENBQUMsa0JBQWtCO1FBRWxELGdCQUFnQjtRQUNoQixpQkFBaUI7UUFDakIsb0JBQW9CO1FBRXBCLGVBQWUsRUFBRSxXQUFXLENBQUMsZUFBZTtRQUM1QyxtQkFBbUIsRUFBRSxXQUFXLENBQUMsbUJBQW1CO0tBQ3JELENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaW5pdE9wdGlvbnMgZnJvbSAnLi9vcHRpb25zLmluaXQubWpzJztcclxuZXhwb3J0IHR5cGUgeyBJbml0T3B0aW9ucywgQmVmb3JlQnVpbGRGbiB9IGZyb20gJy4vb3B0aW9ucy5pbml0Lm1qcyc7XHJcbmV4cG9ydCB0eXBlIHtcclxuICBSZW5kZXJCeUNvbnRlbnRPcHRpb25zLFxyXG4gIFJlbmRlckluU2Vzc2lvbk9wdGlvbnMsXHJcbiAgUmVuZGVyQ2FudmFzT3B0aW9ucyBhcyBSZW5kZXJQYWdlT3B0aW9ucyxcclxuICBSZW5kZXJPcHRpb25zLFxyXG59IGZyb20gJy4vb3B0aW9ucy5yZW5kZXIubWpzJztcclxuZXhwb3J0IHsgcHJlbG9hZFJlbW90ZUZvbnRzLCBwcmVsb2FkU3lzdGVtRm9udHMgfSBmcm9tICcuL29wdGlvbnMuaW5pdC5tanMnO1xyXG5pbXBvcnQgKiBhcyByZW5kZXJlciBmcm9tICcuL3JlbmRlcmVyLm1qcyc7XHJcbmV4cG9ydCB0eXBlIHsgUmVuZGVyU2Vzc2lvbiwgVHlwc3RSZW5kZXJlciB9IGZyb20gJy4vcmVuZGVyZXIubWpzJztcclxuZXhwb3J0IHsgcmVuZGVyZXJCdWlsZEluZm8sIGNyZWF0ZVR5cHN0UmVuZGVyZXIsIGNyZWF0ZVR5cHN0U3ZnUmVuZGVyZXIgfSBmcm9tICcuL3JlbmRlcmVyLm1qcyc7XHJcbmltcG9ydCB7IFJlbmRlclZpZXcgfSBmcm9tICcuL3JlbmRlci9jYW52YXMvdmlldy5tanMnO1xyXG5pbXBvcnQgKiBhcyBjb21waWxlciBmcm9tICcuL2NvbXBpbGVyLm1qcyc7XHJcbmltcG9ydCB7IEZldGNoQWNjZXNzTW9kZWwsIE1lbW9yeUFjY2Vzc01vZGVsIH0gZnJvbSAnLi9mcy9pbmRleC5tanMnO1xyXG5pbXBvcnQgeyBGZXRjaFBhY2thZ2VSZWdpc3RyeSB9IGZyb20gJy4vZnMvcGFja2FnZS5tanMnO1xyXG5leHBvcnQgeyBGZXRjaEFjY2Vzc01vZGVsIH0gZnJvbSAnLi9mcy9pbmRleC5tanMnO1xyXG5leHBvcnQgeyBGZXRjaFBhY2thZ2VSZWdpc3RyeSB9IGZyb20gJy4vZnMvcGFja2FnZS5tanMnO1xyXG5leHBvcnQgdHlwZSB7IEZldGNoQWNjZXNzT3B0aW9ucyB9IGZyb20gJy4vZnMvaW5kZXgubWpzJztcclxuZXhwb3J0IHR5cGUgeyBUeXBzdENvbXBpbGVyIH0gZnJvbSAnLi9jb21waWxlci5tanMnO1xyXG5leHBvcnQgeyBjcmVhdGVUeXBzdENvbXBpbGVyIH0gZnJvbSAnLi9jb21waWxlci5tanMnO1xyXG5cclxuLy8gRXhwb3J0IG1vZHVsZSBvbiB3aW5kb3cuXHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICh3aW5kb3cgYXMgYW55KS5UeXBzdFJlbmRlck1vZHVsZSA9IHtcclxuICAgIFJlbmRlclZpZXcsXHJcblxyXG4gICAgY3JlYXRlVHlwc3RSZW5kZXJlcjogcmVuZGVyZXIuY3JlYXRlVHlwc3RSZW5kZXJlcixcclxuICAgIGNyZWF0ZVR5cHN0U3ZnUmVuZGVyZXI6IHJlbmRlcmVyLmNyZWF0ZVR5cHN0UmVuZGVyZXIsXHJcbiAgICBwcmVsb2FkUmVtb3RlRm9udHM6IGluaXRPcHRpb25zLnByZWxvYWRSZW1vdGVGb250cyxcclxuICAgIHByZWxvYWRTeXN0ZW1Gb250czogaW5pdE9wdGlvbnMucHJlbG9hZFN5c3RlbUZvbnRzLFxyXG4gIH07XHJcbiAgKHdpbmRvdyBhcyBhbnkpLlR5cHN0Q29tcGlsZU1vZHVsZSA9IHtcclxuICAgIGNyZWF0ZVR5cHN0Q29tcGlsZXI6IGNvbXBpbGVyLmNyZWF0ZVR5cHN0Q29tcGlsZXIsXHJcbiAgICBwcmVsb2FkUmVtb3RlRm9udHM6IGluaXRPcHRpb25zLnByZWxvYWRSZW1vdGVGb250cyxcclxuICAgIHByZWxvYWRTeXN0ZW1Gb250czogaW5pdE9wdGlvbnMucHJlbG9hZFN5c3RlbUZvbnRzLFxyXG5cclxuICAgIEZldGNoQWNjZXNzTW9kZWwsXHJcbiAgICBNZW1vcnlBY2Nlc3NNb2RlbCxcclxuICAgIEZldGNoUGFja2FnZVJlZ2lzdHJ5LFxyXG5cclxuICAgIHdpdGhBY2Nlc3NNb2RlbDogaW5pdE9wdGlvbnMud2l0aEFjY2Vzc01vZGVsLFxyXG4gICAgd2l0aFBhY2thZ2VSZWdpc3RyeTogaW5pdE9wdGlvbnMud2l0aFBhY2thZ2VSZWdpc3RyeSxcclxuICB9O1xyXG59XHJcbiJdfQ==