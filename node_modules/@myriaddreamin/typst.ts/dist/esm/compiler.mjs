import { buildComponent } from './init.mjs';
import { kObject } from './internal.types.mjs';
import { preloadRemoteFonts } from './options.init.mjs';
import { LazyWasmModule } from './wasm.mjs';
export class IncrementalServer {
    /**
     * @internal
     */
    [kObject];
    /**
     * @internal
     */
    constructor(s) {
        this[kObject] = s;
    }
    /**
     * Reset the incremental server to the initial state.
     */
    reset() {
        this[kObject].reset();
    }
    /**
     * Return current result.
     */
    current() {
        return this[kObject].current();
    }
    /**
     * Also attach the debug info to the result.
     */
    setAttachDebugInfo(enable) {
        this[kObject].set_attach_debug_info(enable);
    }
}
const gCompilerModule = new LazyWasmModule(async (bin) => {
    const module = await import('@myriaddreamin/typst-ts-web-compiler');
    return await module.default(bin);
});
/**
 * create a Typst compiler.
 * @returns {TypstCompiler} - The Typst compiler.
 * @example
 * ```typescript
 * import { createTypstCompiler } from 'typst';
 * const compiler = createTypstCompiler();
 * await compiler.init();
 * compiler.addSource('/main.typ', 'Hello, typst!');
 * await compiler.compile({ mainFilePath: '/main.typ' });
 * ```
 */
export function createTypstCompiler() {
    return new TypstCompilerDriver();
}
class TypstCompilerDriver {
    compiler;
    compilerJs;
    static defaultAssets = ['text'];
    constructor() { }
    async init(options) {
        this.compilerJs = await import('@myriaddreamin/typst-ts-web-compiler');
        const TypstCompilerBuilder = this.compilerJs.TypstCompilerBuilder;
        const compilerOptions = { ...(options || {}) };
        const beforeBuild = (compilerOptions.beforeBuild ??= []);
        const hasPreloadRemoteFonts = beforeBuild.some((fn) => fn._preloadRemoteFontOptions !== undefined);
        const hasSpecifiedAssets = beforeBuild.some((fn) => fn._preloadRemoteFontOptions?.assets !== undefined);
        const hasDisableAssets = beforeBuild.some((fn) => fn._preloadRemoteFontOptions?.assets === false);
        if (!hasPreloadRemoteFonts || (!hasSpecifiedAssets && !hasDisableAssets)) {
            beforeBuild.push(preloadRemoteFonts([], { assets: TypstCompilerDriver.defaultAssets }));
        }
        const hasFontLoader = beforeBuild.some((fn) => fn._kind === 'fontLoader');
        if (!hasFontLoader) {
            throw new Error('TypstCompiler: no font loader found, please use font loaders, e.g. preloadRemoteFonts or preloadSystemFonts');
        }
        this.compiler = await buildComponent(options, gCompilerModule, TypstCompilerBuilder, {});
    }
    compile(options) {
        return new Promise(resolve => {
            if ('incrementalServer' in options) {
                resolve(this.compiler.incr_compile(options.mainFilePath, convertInputs(options.inputs), options.incrementalServer[kObject], getDiagnosticsArg(options.diagnostics)));
                return;
            }
            resolve(this.compiler.compile(options.mainFilePath, convertInputs(options.inputs), options.format || 'vector', getDiagnosticsArg(options.diagnostics)));
        });
    }
    query(options) {
        return new Promise(resolve => {
            resolve(JSON.parse(this.compiler.query(options.mainFilePath, convertInputs(options.inputs), options.selector, options.field)));
        });
    }
    getSemanticTokenLegend() {
        return new Promise(resolve => {
            resolve(this.compiler.get_semantic_token_legend());
        });
    }
    getSemanticTokens(opts) {
        return new Promise(resolve => {
            this.compiler.reset();
            resolve(this.compiler.get_semantic_tokens(opts.offsetEncoding || 'utf-16', opts.mainFilePath, opts.resultId));
        });
    }
    async withIncrementalServer(f) {
        const srv = new IncrementalServer(this.compiler.create_incr_server());
        try {
            return await f(srv);
        }
        finally {
            srv[kObject].free();
        }
    }
    async getAst(mainFilePath) {
        return this.compiler.get_ast(mainFilePath);
    }
    async reset() {
        await new Promise(resolve => {
            this.compiler.reset();
            resolve(undefined);
        });
    }
    addSource(path, source) {
        if (arguments.length > 2) {
            throw new Error('use of addSource(path, source, isMain) is deprecated, please use addSource(path, source) instead');
        }
        this.compiler.add_source(path, source);
    }
    mapShadow(path, content) {
        this.compiler.map_shadow(path, content);
    }
    unmapShadow(path) {
        this.compiler.unmap_shadow(path);
    }
    resetShadow() {
        this.compiler.reset_shadow();
    }
    renderPageToCanvas() {
        throw new Error('Please use the api TypstRenderer.renderToCanvas in v0.4.0');
    }
}
createTypstCompiler._impl = TypstCompilerDriver;
// todo: caching inputs
function convertInputs(inputs) {
    return inputs ? Object.entries(inputs) : undefined;
}
function getDiagnosticsArg(diagnostics) {
    switch (diagnostics) {
        case 'none':
            return 1;
        case 'unix':
            return 2;
        case 'full':
        default:
            return 3;
    }
}
//# sourceMappingURL=data:application/json;base64,